package controllers

import (
	"fmt"
	"log"
	"net/http"

	"github.com/csye7125-su24-team14/webapp-cve-consumer/app/consumer"
	"github.com/gin-gonic/gin"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

type Server struct {
	DB     *gorm.DB
	Router *gin.Engine
	// Consumer *consumer.Consumer
}

type Result struct {
	Dummy string
}

var errList = make(map[string]string)

func (server *Server) Initialize(Dbdriver, DbUser, DbPassword, DbPort, DbHost, DbName string) {

	var dbErr error

	// If you are using mysql, i added support for you here(dont forgot to edit the .env file)
	if Dbdriver == "postgres" {
		// host=localhost user=postgres password=1234 dbname=postgres port=5432 sslmode=disable
		DBURL := fmt.Sprintf("host=%s port=%s user=%s dbname=%s sslmode=disable password=%s", DbHost, DbPort, DbUser, DbName, DbPassword)
		server.DB, dbErr = gorm.Open(postgres.Open(DBURL), &gorm.Config{NamingStrategy: schema.NamingStrategy{
			TablePrefix:   "cve.",
			SingularTable: false,
		}})
		if dbErr != nil {
			fmt.Printf("Cannot connect to %s database", Dbdriver)
			log.Fatal("This is the error connecting to postgres:", dbErr)
		} else {
			fmt.Printf("We are connected to the %s database", Dbdriver)
		}
	} else {
		fmt.Println("Unknown Driver")
	}

	server.Router = gin.Default()
	server.Router.HandleMethodNotAllowed = true
	// server.Consumer = consumer.NewConsumer(server.DB)
	// server.Router.Use(middlewares.CORSMiddleware())
	server.Router.Use(server.CheckDBMiddleware)

	server.initializeRoutes()

}

func (server *Server) CheckDBMiddleware(c *gin.Context) {

	var result Result

	if dbErr := server.DB.Raw("SELECT 'X' AS dummy").Scan(&result).Error; dbErr != nil {
		log.Println("inside check ", dbErr)
		log.Println(result)
		c.JSON(http.StatusServiceUnavailable, gin.H{"error": "Service Unavailable: Database connection lost"})
		c.Abort()
		return
	}

	c.Next()
}

func (server *Server) Run(addr string) {

	var result Result

	if err := server.DB.Raw("SELECT 'X' AS dummy").Scan(&result).Error; err != nil {
		log.Fatal(err)
	}
	consumer.ConsumeCves(server.DB)
	fmt.Println(result.Dummy)
	log.Fatal(http.ListenAndServe(addr, server.Router))
}
