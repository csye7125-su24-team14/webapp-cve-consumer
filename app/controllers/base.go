package controllers

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/IBM/sarama"
	"github.com/csye7125-su24-team14/webapp-cve-consumer/app/consumer"
	"github.com/gin-gonic/gin"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

type Server struct {
	DB     *gorm.DB
	Router *gin.Engine
}

type Result struct {
	Dummy string
}

var errList = make(map[string]string)

func (server *Server) Initialize(Dbdriver, DbUser, DbPassword, DbPort, DbHost, DbName string) {

	var dbErr error

	// If you are using mysql, i added support for you here(dont forgot to edit the .env file)
	if Dbdriver == "postgres" {
		// host=localhost user=postgres password=1234 dbname=postgres port=5432 sslmode=disable
		DBURL := fmt.Sprintf("host=%s port=%s user=%s dbname=%s sslmode=disable password=%s", DbHost, DbPort, DbUser, DbName, DbPassword)
		server.DB, dbErr = gorm.Open(postgres.Open(DBURL), &gorm.Config{NamingStrategy: schema.NamingStrategy{
			TablePrefix:   "cve.",
			SingularTable: false,
		}})
		if dbErr != nil {
			fmt.Printf("Cannot connect to %s database", Dbdriver)
			log.Fatal("This is the error connecting to postgres:", dbErr)
		} else {
			fmt.Printf("We are connected to the %s database", Dbdriver)
		}
	} else {
		fmt.Println("Unknown Driver")
	}

	server.Router = gin.Default()
	server.Router.HandleMethodNotAllowed = true
	// server.Router.Use(middlewares.CORSMiddleware())
	server.Router.GET("/liveness", server.LivenessCheck)
	server.Router.Use(server.CheckDBMiddleware)

	server.initializeRoutes()

}
func (server *Server) LivenessCheck(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"status": "alive"})
}

func checkDatabaseConnection(db *gorm.DB) error {
	var result Result
	if dbErr := db.Raw("SELECT 'X' AS dummy").Scan(&result).Error; dbErr != nil {
		log.Println("Database connection error: ", dbErr)
		return fmt.Errorf("service unavailable: database connection lost")
	}
	return nil
}

func checkKafkaConnection(kafkaURL, topic string) error {
	config := sarama.NewConfig()
	config.Net.SASL.Enable = true
	config.Net.SASL.User = os.Getenv("USERNAME")
	config.Net.SASL.Password = os.Getenv("PASSWORD")
	config.Net.SASL.Mechanism = sarama.SASLTypeSCRAMSHA256
	config.Net.SASL.SCRAMClientGeneratorFunc = func() sarama.SCRAMClient { return &consumer.XDGSCRAMClient{HashGeneratorFcn: consumer.SHA256} }

	brokers := strings.Split(kafkaURL, ",")
	client, err := sarama.NewClient(brokers, config)
	if err != nil {
		log.Println("Kafka connection error: ", err)
		return fmt.Errorf("internal server error: Kafka connection failed")
	}
	defer client.Close()

	topics, err := client.Topics()
	if err != nil {
		log.Println("Kafka topics retrieval error: ", err)
		return fmt.Errorf("internal server error: Kafka topics retrieval failed")
	}

	topicExists := false
	for _, t := range topics {
		if t == topic {
			topicExists = true
			break
		}
	}
	log.Println("Kafka topic status: ", topicExists)
	if !topicExists {
		log.Println("Kafka topic not found: ", topic)
		return fmt.Errorf("internal server error: Kafka topic not found")
	}

	return nil
}

func (server *Server) CheckDBMiddleware(c *gin.Context) {
	if err := checkDatabaseConnection(server.DB); err != nil {
		c.JSON(http.StatusServiceUnavailable, gin.H{"error": err.Error()})
		c.Abort()
		return
	}

	kafkaURL := os.Getenv("kafkaURL")
	topic := os.Getenv("TOPIC_NAME")

	if err := checkKafkaConnection(kafkaURL, topic); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		c.Abort()
		return
	}

	c.Next()
}

func (server *Server) Run(addr string) {
	if err := checkDatabaseConnection(server.DB); err != nil {
		log.Fatal(err)
	}

	kafkaURL := os.Getenv("kafkaURL")
	topic := os.Getenv("TOPIC_NAME")

	if err := checkKafkaConnection(kafkaURL, topic); err != nil {
		log.Fatal(err)
	}
	go func() {
		log.Fatal(http.ListenAndServe(addr, server.Router))
	}()
	consumer.StartKafkaConsumer(server.DB)
}
