package controllers

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/segmentio/kafka-go"
	"github.com/segmentio/kafka-go/sasl/scram"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"
)

type Server struct {
	DB     *gorm.DB
	Router *gin.Engine
	// Consumer *consumer.Consumer
}

type Result struct {
	Dummy string
}

var errList = make(map[string]string)

func (server *Server) Initialize(Dbdriver, DbUser, DbPassword, DbPort, DbHost, DbName string) {

	var dbErr error

	// If you are using mysql, i added support for you here(dont forgot to edit the .env file)
	if Dbdriver == "postgres" {
		// host=localhost user=postgres password=1234 dbname=postgres port=5432 sslmode=disable
		DBURL := fmt.Sprintf("host=%s port=%s user=%s dbname=%s sslmode=disable password=%s", DbHost, DbPort, DbUser, DbName, DbPassword)
		server.DB, dbErr = gorm.Open(postgres.Open(DBURL), &gorm.Config{NamingStrategy: schema.NamingStrategy{
			TablePrefix:   "cve.",
			SingularTable: false,
		}})
		if dbErr != nil {
			fmt.Printf("Cannot connect to %s database", Dbdriver)
			log.Fatal("This is the error connecting to postgres:", dbErr)
		} else {
			fmt.Printf("We are connected to the %s database", Dbdriver)
		}
	} else {
		fmt.Println("Unknown Driver")
	}

	server.Router = gin.Default()
	server.Router.HandleMethodNotAllowed = true
	// server.Router.Use(middlewares.CORSMiddleware())
	server.Router.GET("/liveness", server.LivenessCheck)
	server.Router.Use(server.CheckDBMiddleware)

	server.initializeRoutes()

}
func (server *Server) LivenessCheck(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"status": "alive"})
}

func checkDatabaseConnection(db *gorm.DB) error {
	var result Result
	if dbErr := db.Raw("SELECT 'X' AS dummy").Scan(&result).Error; dbErr != nil {
		log.Println("Database connection error: ", dbErr)
		return fmt.Errorf("service unavailable: database connection lost")
	}
	return nil
}

func checkKafkaConnection(kafkaURL, topic string) error {
	mechanism, err := scram.Mechanism(scram.SHA256, os.Getenv("USERNAME"), os.Getenv("PASSWORD"))
	if err != nil {
		log.Println("Kafka SASL mechanism error: ", err)
		return fmt.Errorf("internal server error: Kafka SASL mechanism failed")
	}

	dialer := &kafka.Dialer{
		Timeout:       10 * time.Second,
		DualStack:     true,
		SASLMechanism: mechanism,
	}

	// Connect to the Kafka broker
	conn, err := dialer.DialContext(context.Background(), "tcp", kafkaURL)
	if err != nil {
		log.Println("Kafka connection error: ", err)
		return fmt.Errorf("internal server error: Kafka connection failed")
	}
	defer conn.Close()

	// Check if the topic exists
	partitions, err := conn.ReadPartitions(topic)
	if err != nil {
		log.Println("Kafka topic error: ", err)
		return fmt.Errorf("internal server error: Kafka topic not found")
	}

	if len(partitions) == 0 {
		log.Println("Kafka topic not found: ", topic)
		return fmt.Errorf("internal server error: Kafka topic not found")
	}

	return nil
}

func (server *Server) CheckDBMiddleware(c *gin.Context) {
	if err := checkDatabaseConnection(server.DB); err != nil {
		c.JSON(http.StatusServiceUnavailable, gin.H{"error": err.Error()})
		c.Abort()
		return
	}

	kafkaURL := os.Getenv("kafkaURL")
	topic := os.Getenv("TOPIC_NAME")

	if err := checkKafkaConnection(kafkaURL, topic); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		c.Abort()
		return
	}

	c.Next()

	// var result Result

	// if dbErr := server.DB.Raw("SELECT 'X' AS dummy").Scan(&result).Error; dbErr != nil {
	// 	log.Println("inside check ", dbErr)
	// 	log.Println(result)
	// 	c.JSON(http.StatusServiceUnavailable, gin.H{"error": "Service Unavailable: Database connection lost"})
	// 	c.Abort()
	// 	return
	// }
	// kafkaURL := os.Getenv("kafkaURL")
	// topic := os.Getenv("TOPIC_NAME")
	// // groupID := os.Getenv("groupID")

	// mechanism, err := scram.Mechanism(scram.SHA256, os.Getenv("USERNAME"), os.Getenv("PASSWORD"))
	// if err != nil {
	// 	log.Println("Kafka SASL mechanism error: ", err)
	// 	c.JSON(http.StatusInternalServerError, gin.H{"error": "Internal Server Error: Kafka SASL mechanism failed"})
	// 	c.Abort()
	// 	return
	// }

	// dialer := &kafka.Dialer{
	// 	Timeout:       10 * time.Second,
	// 	DualStack:     true,
	// 	SASLMechanism: mechanism,
	// }

	// // Connect to the Kafka broker
	// conn, err := dialer.DialContext(context.Background(), "tcp", kafkaURL)
	// if err != nil {
	// 	log.Println("Kafka connection error: ", err)
	// 	c.JSON(http.StatusInternalServerError, gin.H{"error": "Internal Server Error: Kafka connection failed"})
	// 	c.Abort()
	// 	return
	// }
	// defer conn.Close()

	// // Check if the topic exists
	// partitions, err := conn.ReadPartitions(topic)
	// if err != nil {
	// 	log.Println("Kafka topic error: ", err)
	// 	c.JSON(http.StatusInternalServerError, gin.H{"error": "Internal Server Error: Kafka topic not found"})
	// 	c.Abort()
	// 	return
	// }

	// if len(partitions) == 0 {
	// 	log.Println("Kafka topic not found: ", topic)
	// 	c.JSON(http.StatusInternalServerError, gin.H{"error": "Internal Server Error: Kafka topic not found"})
	// 	c.Abort()
	// 	return
	// }

	// c.Next()
}

func (server *Server) Run(addr string) {

	// var result Result

	// if err := server.DB.Raw("SELECT 'X' AS dummy").Scan(&result).Error; err != nil {
	// 	log.Fatal(err)
	// }
	// consumer.ConsumeCves(server.DB)
	// fmt.Println(result.Dummy)
	if err := checkDatabaseConnection(server.DB); err != nil {
		log.Fatal(err)
	}

	kafkaURL := os.Getenv("kafkaURL")
	topic := os.Getenv("TOPIC_NAME")

	if err := checkKafkaConnection(kafkaURL, topic); err != nil {
		log.Fatal(err)
	}
	log.Fatal(http.ListenAndServe(addr, server.Router))
}
