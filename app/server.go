package app

import (
	"context"
	"fmt"

	"os"

	zlog "github.com/rs/zerolog/log"

	"go.opentelemetry.io/otel"
	semconv "go.opentelemetry.io/otel/semconv/v1.26.0"

	"github.com/csye7125-su24-team14/webapp-cve-consumer/app/controllers"
	"github.com/joho/godotenv"

	"go.opentelemetry.io/otel/exporters/stdout/stdouttrace"

	"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp"
	"go.opentelemetry.io/otel/sdk/resource"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
)

func init() {
	// loads values from .env into the system
	if err := godotenv.Load(); err != nil {
		zlog.Info().Msg("No .env file found")
	}
}

var server = &controllers.Server{}

func Run() {

	var err error
	err = godotenv.Load()

	if err != godotenv.Load() {
		zlog.Error().Err(err).Msg("Error getting env")
	} else {
		fmt.Println("We are getting values")
	}

	ctx := context.Background()

	// For testing to print out traces to the console
	// exp, err := newConsoleExporter()
	exp, err := newOTLPExporter(ctx)

	if err != nil {
		zlog.Fatal().Msgf("failed to initialize exporter: %v", err)
	}

	// Create a new tracer provider with a batch span processor and the given exporter.
	tp := newTraceProvider(exp)

	// Handle shutdown properly so nothing leaks.
	defer func() { _ = tp.Shutdown(ctx) }()

	otel.SetTracerProvider(tp)

	server.Initialize(os.Getenv("DB_DRIVER"), os.Getenv("DB_USER"), os.Getenv("DB_PASSWORD"), os.Getenv("DB_PORT"), os.Getenv("DB_HOST"), os.Getenv("DB_NAME"))

	apiPort := fmt.Sprintf(":%s", os.Getenv("API_PORT"))
	zlog.Info().Msgf("Listening to port %s", apiPort)

	server.Run(apiPort)

}

// Console Exporter, only for testing
func newConsoleExporter() (sdktrace.SpanExporter, error) {
	return stdouttrace.New()
}

func newOTLPExporter(ctx context.Context) (sdktrace.SpanExporter, error) {
	// Change default HTTPS -> HTTP
	insecureOpt := otlptracehttp.WithInsecure()

	// Update default OTLP reciver endpoint
	endpointOpt := otlptracehttp.WithEndpoint(os.Getenv("OTLP_ENDPOINT"))

	return otlptracehttp.New(ctx, insecureOpt, endpointOpt)
}

// TracerProvider is an OpenTelemetry TracerProvider.
// It provides Tracers to instrumentation so it can trace operational flow through a system.
func newTraceProvider(exp sdktrace.SpanExporter) *sdktrace.TracerProvider {
	// Ensure default SDK resources and the required service name are set.
	r, err := resource.Merge(
		resource.Default(),
		resource.NewWithAttributes(
			semconv.SchemaURL,
			semconv.ServiceName("web-cve-consumer"),
		),
	)

	if err != nil {
		panic(err)
	}

	return sdktrace.NewTracerProvider(
		sdktrace.WithBatcher(exp),
		sdktrace.WithResource(r),
	)
}
